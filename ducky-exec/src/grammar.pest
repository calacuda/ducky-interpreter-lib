WHITESPACE = _{ " "+ | "\t"+ }
NEWLINE = _{ "\n" | "\r\n" }

text = { (!NEWLINE ~ ANY)+ }
single_line_rem = _{ ^"REM" ~ !"_" ~ text}
// rem_line = { text }
rem_block_start = _{ ^"REM_BLOCK" }
rem_block_end = _{ ^"END_REM" }
multi_line_rem = _{ rem_block_start ~ NEWLINE ~ (!rem_block_end ~ (WHITESPACE? ~ text ~ NEWLINE+))+ ~ rem_block_end }
REM = { multi_line_rem | single_line_rem }

// string_start = _{ ^"STRING" }
STRING = { ^"STRING" ~ WHITESPACE* ~ text }

// stringln_start = _{ ^"STRINGLN" }
STRINGLN = { ^"STRINGLN" ~ WHITESPACE* ~ text }

// string_end = _{ ^"END_STRING" }
STRING_BLOCK = { ^"STRING" ~ NEWLINE ~ (!^"END_STRING" ~ (WHITESPACE? ~ text ~ NEWLINE+))+ ~ ^"END_STRING" }

// stringln_start_block = _{ ^"STRINGLN" ~ NEWLINE }
// stringln_end = _{ ^"END_STRINGLN" }
STRINGLN_BLOCK = { ^"STRINGLN" ~ NEWLINE ~ (!^"END_STRINGLN" ~ (WHITESPACE? ~ text ~ NEWLINE+))+ ~ ^"END_STRINGLN" } 

UP = { "UPARROW" | "UP" }
DOWN = { "DOWNARROW" | "DOWN" }
LEFT = { "LEFTARROW" | "LEFT" }
RIGHT = { "RIGHTARROW" | "RIGHT" }
PAGEUP = { "PAGEUP" }
PAGEDOWN = { "PAGEDOWN" }
HOME = { "HOME" }
END = { "END" ~ (!"_" ~ (WHITESPACE | NEWLINE)?) }
INSERT = { "INSERT" }
DELETE = { "DELETE" | "DEL" }
BACKSPACE = { "BACKSPACE" }
TAB = { "TAB" }
SPACE = { "SPACE" }

cursor_keys = _{ UP | DOWN | LEFT | RIGHT | PAGEUP | PAGEDOWN | HOME | END | INSERT | DELETE | BACKSPACE | TAB | SPACE }

ENTER = { "ENTER" }
ESCAPE = { "ESCAPE" }
PAUSE_BREAK = { "PAUSE BREAK" }
PRINTSCREEN = { "PRINTSCREEN" }
MENU_APP = { "MENU" | "APP" }
F1 = { "F1" }
F2 = { "F2" }
F3 = { "F3" }
F4 = { "F4" }
F5 = { "F5" }
F6 = { "F6" }
F7 = { "F7" }
F8 = { "F8" }
F9 = { "F9" }
F10 = { "F10" }
F11 = { "F11" }
F12 = { "F12" }

sys_mods = _{ ENTER | ESCAPE | PAUSE_BREAK | PRINTSCREEN | MENU_APP | F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8 | F9 | F10 | F11 | F12 }

SHIFT = { "SHIFT" }
ALT = { "ALT" }
CONTROL = { "CONTROL" | "CTRL" }
COMMAND = { "COMMAND" }
WINDOWS = { "WINDOWS" | "GUI" }

modifier = _{ SHIFT | ALT | CONTROL | COMMAND | WINDOWS }

key_mod_compbo = { modifier ~ (((modifier | sys_mods | cursor_keys) ~ (WHITESPACE | &NEWLINE | &EOI )) | text)+ }

INJECT_KW = _{ "INJECT_MOD" }
INJECT_MOD = { INJECT_KW ~ modifier }

CAPS_LOCK = { "CAPS_LOCK" }
NUM_LOCK = { "NUM_LOCK" }
SCROLLLOCK = { "SCROLLLOCK" }

LOCK_KEYS = _{ CAPS_LOCK | NUM_LOCK | SCROLLLOCK }

DELAY_KW = _{ "DELAY" }
DELAY_ARG = { ASCII_DIGIT+ }
DELAY = { DELAY_KW ~ DELAY_ARG }

LED_OFF = { "LED_OFF" }
LED_R = { "LED_R" }
LED_G = { "LED_G" }

// LED = { LED_OFF | LED_G | LED_R }~ (PEEK ~ !(PEEK ~ ANY))*

// SCRIPT = _ { SOI ~ ((DELAY | key_mod_compbo | STRING_BLOCK |~ (PEEK ~ !(PEEK ~ ANY))* STRINGLN_BLOCK | STRING | STRINGLN) | ((LED | LOCK_KEYS | cursor_keys | REM) ~ NEWLINE?))+ ~ EOI }
// commands = { ((LED | LOCK_KEYS | cursor_keys | STRING_BLOCK | STRINGLN_BLOCK | REM) ~ NEWLINE?) | EOI) | ((DELAY | key_mod_compbo | STRING | STRINGLN) ~ EOI) }
// SCRIPT = _{ SOI ~ ((DELAY | LED_OFF | LED_G | LED_R | LOCK_KEYS | STRINGLN_BLOCK | STRING_BLOCK | STRINGLN | STRING | REM | key_mod_compbo | cursor_keys | modifier | sys_mods | INJECT_MOD)* ~ NEWLINE+)+ ~ EOI }
lines = _{ (DELAY | LED_OFF | LED_G | LED_R | LOCK_KEYS | STRINGLN_BLOCK | STRINGLN | STRING_BLOCK | STRING | REM | key_mod_compbo | cursor_keys | sys_mods | INJECT_MOD) ~ NEWLINE* } 
SCRIPT = _{ SOI ~ NEWLINE* ~ lines+ ~ EOI }
// SCRIPT = _{ SOI ~ NEWLINE* ~ (REM ~ NEWLINE*)+ ~ eoi }
// SCRIPT = { SOI ~ (REM | NEWLINE)+ ~ EOI}
